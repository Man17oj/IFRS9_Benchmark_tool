// src/components/dashboard/UploadTab.tsx

import { Button } from '@/components/ui/button';
import FileUploader from '@/components/FileUploader';
import { UploadedFile } from '@/lib/types';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { FileText, Eye, EyeOff, Loader2 } from 'lucide-react';
import PDFViewer from '@/components/PDFViewer';
import { motion } from 'framer-motion';
import { useToast } from '@/hooks/use-toast';

interface UploadTabProps {
  onFilesUploaded: (files: UploadedFile[]) => void;
  uploadedFiles: UploadedFile[];
  goToNextTab: () => void;
}

const UploadTab = ({ onFilesUploaded, uploadedFiles, goToNextTab }: UploadTabProps) => {
  const [selectedFileForPreview, setSelectedFileForPreview] = useState<UploadedFile | null>(null);
  const [showPreview, setShowPreview] = useState<boolean>(true);
  const [pdfFileForPreview, setPdfFileForPreview] = useState<File | null>(null);
  
  // Stores the mapping from a client-generated ID (from FileUploader) to the actual File object.
  // This is used to get the File object for upload and potentially for preview.
  const [clientRawFileMap, setClientRawFileMap] = useState<Map<string, File>>(new Map());
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();

  // Effect to update preview when dashboard's uploadedFiles (backend confirmed) change
  useEffect(() => {
    if (uploadedFiles.length > 0) {
      const latestBackendFileMeta = uploadedFiles[uploadedFiles.length - 1];
      setSelectedFileForPreview(latestBackendFileMeta);

      // Attempt to find the raw file for preview using its name and size,
      // as backend IDs won't match client-side IDs in clientRawFileMap.
      let fileToPreview: File | null = null;
      for (const rawFile of clientRawFileMap.values()) {
        if (rawFile.name === latestBackendFileMeta.name && rawFile.size === latestBackendFileMeta.size) {
          fileToPreview = rawFile;
          break;
        }
      }
      setPdfFileForPreview(fileToPreview);

    } else {
      setSelectedFileForPreview(null);
      setPdfFileForPreview(null);
    }
  // Listen to uploadedFiles (from Dashboard) and clientRawFileMap (local state for raw files)
  }, [uploadedFiles, clientRawFileMap]);


  // This function is called by FileUploader when files are selected locally
  const handleFilesSelectedByUploader = async (
    clientSideFileMetadataList: UploadedFile[], // Metadata generated by FileUploader (client-side IDs)
    rawFileObjectsMap: Map<string, File> // The actual File objects, mapped by client-side ID
  ) => {
    // Store the raw files mapped by their client-side ID.
    // This map will be used to retrieve the actual File objects for upload.
    setClientRawFileMap(new Map([...clientRawFileMap, ...rawFileObjectsMap]));
    
    setIsUploading(true);
    toast({ title: "Uploading files...", description: `Attempting to upload ${rawFileObjectsMap.size} file(s).` });

    const formData = new FormData();
    let filesToUploadExist = false;
    
    // Iterate over the File objects from the map to append to FormData
    rawFileObjectsMap.forEach(file => {
      formData.append('files', file); 
      filesToUploadExist = true;
    });

    if (!filesToUploadExist) {
        setIsUploading(false);
        toast({ title: "No new files selected to upload.", variant: "default" });
        // Call onFilesUploaded with current backend-confirmed files if no new files were actually added.
        // This ensures consistency if the user re-selects existing files or an empty list.
        onFilesUploaded(uploadedFiles); // Pass the current state from Dashboard
        return;
    }

    try {
      const response = await fetch('http://localhost:5000/api/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (response.ok && result.status === 'success' && result.files) {
        // `result.files` are the UploadedFile objects from the backend.
        // These have backend-generated IDs.
        // We should merge these with any existing uploaded files, handling potential duplicates if necessary.
        // For simplicity here, we'll assume new uploads replace or add.
        // A more robust solution might check for existing files by name/size if re-uploading is possible.
        
        // Create a map of existing files by their backend ID for quick lookup
        const existingFilesMap = new Map(uploadedFiles.map(f => [f.id, f]));
        const newBackendFiles = result.files as UploadedFile[];

        newBackendFiles.forEach(backendFile => {
            existingFilesMap.set(backendFile.id, backendFile); // Add or update file by backend ID
        });
        
        const updatedFilesForDashboard = Array.from(existingFilesMap.values());
        onFilesUploaded(updatedFilesForDashboard); // Update Dashboard state

        toast({
          title: "Upload Successful",
          description: `${newBackendFiles.length} file(s) processed by server. Total uploaded: ${updatedFilesForDashboard.length}`,
        });
      } else {
        throw new Error(result.error || 'Unknown upload error from server');
      }
    } catch (error) {
      console.error("Upload error:", error);
      toast({
        title: "Upload Failed",
        description: error instanceof Error ? error.message : "Could not upload files to server.",
        variant: "destructive",
      });
      // Optionally, you might want to revert clientRawFileMap or not call onFilesUploaded
      // depending on how you want to handle partial failures or retries.
      // For now, we don't change the dashboard's uploadedFiles state on failure here.
    } finally {
      setIsUploading(false);
    }
  };

  const togglePreview = () => {
    setShowPreview(!showPreview);
  };

  // Handle selection for preview from the `uploadedFiles` list (which are backend confirmed)
  const handleFileSelectionForPreview = (fileMetadata: UploadedFile) => {
    setSelectedFileForPreview(fileMetadata);
    // Attempt to find the corresponding raw file for preview from the clientRawFileMap
    // This relies on the raw files being available client-side.
    // If files are cleared from clientRawFileMap after upload, this preview might not work for older files.
    let fileToPreview: File | null = null;
    for (const rawFile of clientRawFileMap.values()) {
        // Match by name and size as IDs might differ (client vs backend)
        if (rawFile.name === fileMetadata.name && rawFile.size === fileMetadata.size) {
            fileToPreview = rawFile;
            break;
        }
    }
    if (fileToPreview) {
      setPdfFileForPreview(fileToPreview);
    } else {
      setPdfFileForPreview(null); 
      toast({title: "Preview unavailable", description: "Original file for preview not found locally.", variant: "default"})
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-1 space-y-6">
        <FileUploader 
          onFilesUploaded={handleFilesSelectedByUploader} 
          acceptedFileTypes={['.pdf']}
        />
        
        {isUploading && (
          <div className="flex items-center justify-center p-4 border rounded-md bg-muted">
            <Loader2 className="h-5 w-5 animate-spin mr-2" />
            <span>Uploading files...</span>
          </div>
        )}

        {uploadedFiles.length > 0 && !isUploading && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
            className="border rounded-md"
          >
            <div className="bg-muted p-3 font-medium flex justify-between items-center">
              <div>Uploaded Files ({uploadedFiles.length}/10)</div>
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-8 px-2 text-muted-foreground"
                onClick={togglePreview}
              >
                {showPreview ? <EyeOff className="h-4 w-4 mr-1" /> : <Eye className="h-4 w-4 mr-1" />}
                {showPreview ? "Hide Preview" : "Show Preview"}
              </Button>
            </div>
            <div className="divide-y max-h-[300px] overflow-y-auto">
              {uploadedFiles.map((file) => ( 
                <motion.div
                  key={file.id} 
                  className={`p-3 flex items-center justify-between cursor-pointer hover:bg-muted/50 transition-colors ${selectedFileForPreview?.id === file.id ? 'bg-yellow-50 border-l-2 border-yellow-400' : ''}`}
                  onClick={() => handleFileSelectionForPreview(file)}
                >
                  <div className="flex items-center">
                    <FileText className="h-4 w-4 text-muted-foreground mr-2" />
                    <span className="text-sm font-medium">{file.name}</span>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {Math.round(file.size / 1024).toLocaleString()} KB
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}
      </div>

      {uploadedFiles.length > 0 && selectedFileForPreview && showPreview && !isUploading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
          className="lg:col-span-2"
        >
          <Card className="h-full">
            <CardHeader className="pb-3">
              <CardTitle className="text-base flex items-center justify-between">
                <div className="flex items-center">
                  <FileText className="h-4 w-4 mr-2" />
                  PDF Preview
                </div>
                <div className="text-sm font-normal">
                  {selectedFileForPreview.name}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="bg-muted/30 h-[750px] flex flex-col">
                <PDFViewer file={pdfFileForPreview} className="h-full" />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      <div className="flex justify-end col-span-full">
        <motion.div>
          <Button 
            onClick={goToNextTab} 
            disabled={uploadedFiles.length === 0 || isUploading}
            className="bg-yellow-400 hover:bg-yellow-500 text-black"
          >
            {isUploading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
            {isUploading ? "Uploading..." : "Next: Select Prompts"}
          </Button>
        </motion.div>
      </div>
    </div>
  );
};

export default UploadTab;